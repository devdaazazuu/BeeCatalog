#!/usr/bin/env python
# exemplo_uso_importacao.py

"""
Exemplo Pr√°tico: Como Usar o Sistema de Importa√ß√£o de Planilhas

Este script demonstra como usar o sistema de importa√ß√£o de planilhas
do BeeCatalog para acelerar o processo de cataloga√ß√£o de produtos.
"""

import os
import sys
import django
import pandas as pd
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backbeecatalog.settings')
django.setup()

def criar_planilha_exemplo():
    """Cria uma planilha de exemplo para demonstra√ß√£o."""
    print("üìù Criando planilha de exemplo...")
    
    # Dados de exemplo
    produtos_exemplo = {
        'SKU': [
            'SMART001', 'FONE002', 'CAM003', 'TABLET004', 'WATCH005'
        ],
        'T√≠tulo': [
            'Smartphone Galaxy Pro 128GB',
            'Fone Bluetooth Premium',
            'Camiseta Esportiva Dry-Fit',
            'Tablet 10 polegadas 64GB',
            'Smartwatch Fitness Tracker'
        ],
        'Descri√ß√£o': [
            'Smartphone com tela de 6.5 polegadas, 128GB de armazenamento, c√¢mera tripla de 64MP',
            'Fone de ouvido sem fio com cancelamento de ru√≠do ativo e bateria de 30 horas',
            'Camiseta esportiva com tecnologia dry-fit para corrida e academia',
            'Tablet com tela HD de 10 polegadas, 64GB de armazenamento e Android 12',
            'Rel√≥gio inteligente com monitor card√≠aco, GPS e resist√™ncia √† √°gua'
        ],
        'Pre√ßo': [
            899.99, 299.99, 79.99, 599.99, 399.99
        ],
        'Marca': [
            'TechCorp', 'AudioMax', 'SportWear', 'TabletPro', 'FitTech'
        ],
        'Categoria': [
            'Eletr√¥nicos', '√Åudio', 'Roupas', 'Eletr√¥nicos', 'Wearables'
        ],
        'Palavras-chave': [
            'smartphone, celular, android, c√¢mera',
            'fone, bluetooth, sem fio, m√∫sica',
            'camiseta, esporte, corrida, academia',
            'tablet, android, tela grande, port√°til',
            'smartwatch, fitness, sa√∫de, GPS'
        ],
        'Caracter√≠sticas': [
            'Tela 6.5"; 128GB armazenamento; C√¢mera 64MP; Bateria 4000mAh',
            'Bluetooth 5.0; Cancelamento ru√≠do; Bateria 30h; Resistente √°gua',
            'Tecido dry-fit; Respir√°vel; Prote√ß√£o UV; Tamanhos P-GG',
            'Tela 10" HD; Android 12; 64GB; Wi-Fi; C√¢mera 8MP',
            'Monitor card√≠aco; GPS; Resistente √°gua; Bateria 7 dias'
        ]
    }
    
    # Criar DataFrame
    df = pd.DataFrame(produtos_exemplo)
    
    # Salvar como Excel
    arquivo_exemplo = 'produtos_exemplo.xlsx'
    df.to_excel(arquivo_exemplo, index=False, sheet_name='Produtos')
    
    print(f"‚úÖ Planilha criada: {arquivo_exemplo}")
    print(f"   - {len(df)} produtos de exemplo")
    print(f"   - {len(df.columns)} colunas mapeadas")
    
    return arquivo_exemplo

def demonstrar_preview(arquivo):
    """Demonstra como fazer preview da planilha."""
    print("\nüîç DEMONSTRA√á√ÉO: Preview da Planilha")
    print("=" * 50)
    
    from api.spreadsheet_importer import spreadsheet_importer
    
    try:
        # Fazer preview
        preview = spreadsheet_importer.preview_import(arquivo, sample_size=3)
        
        print(f"üìä Estat√≠sticas:")
        print(f"   - Total de linhas: {preview['total_rows']}")
        print(f"   - Linhas v√°lidas: {preview['valid_rows']}")
        print(f"   - Produtos identificados: {preview['identified_products']}")
        
        print(f"\nüìã Amostra de produtos:")
        for i, produto in enumerate(preview['sample_products'], 1):
            print(f"\n   Produto {i}:")
            for campo, valor in produto.items():
                if valor:
                    valor_display = str(valor)[:60] + '...' if len(str(valor)) > 60 else str(valor)
                    print(f"     {campo}: {valor_display}")
        
        if preview['errors']:
            print(f"\n‚ö†Ô∏è  Erros encontrados: {len(preview['errors'])}")
            for erro in preview['errors'][:3]:
                print(f"     - {erro}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no preview: {e}")
        return False

def demonstrar_analise_colunas(arquivo):
    """Demonstra an√°lise de colunas da planilha."""
    print("\nüîç DEMONSTRA√á√ÉO: An√°lise de Colunas")
    print("=" * 50)
    
    from api.spreadsheet_importer import spreadsheet_importer
    
    try:
        # Ler planilha
        df = spreadsheet_importer.read_spreadsheet(arquivo)
        
        # Mapear colunas
        mapeamento = spreadsheet_importer.map_columns(df)
        
        print(f"üìã Informa√ß√µes da planilha:")
        print(f"   - Total de linhas: {len(df)}")
        print(f"   - Total de colunas: {len(df.columns)}")
        
        print(f"\nüóÇÔ∏è  Mapeamento de colunas:")
        for campo_padrao, coluna_original in mapeamento.items():
            if coluna_original:
                valores_nao_nulos = df[coluna_original].count()
                print(f"   {campo_padrao} ‚Üê {coluna_original} ({valores_nao_nulos} valores)")
        
        # Colunas n√£o mapeadas
        colunas_nao_mapeadas = [col for col in df.columns if col not in mapeamento.values()]
        if colunas_nao_mapeadas:
            print(f"\n‚ùì Colunas n√£o mapeadas:")
            for col in colunas_nao_mapeadas:
                print(f"   - {col}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")
        return False

def demonstrar_importacao(arquivo):
    """Demonstra importa√ß√£o para a mem√≥ria."""
    print("\nüì• DEMONSTRA√á√ÉO: Importa√ß√£o para Mem√≥ria")
    print("=" * 50)
    
    from api.spreadsheet_importer import spreadsheet_importer
    from api.memory_utils import get_memory_statistics
    
    try:
        # Estat√≠sticas antes
        print("üìä Estat√≠sticas ANTES da importa√ß√£o:")
        stats_antes = get_memory_statistics()
        print(f"   - Produtos na mem√≥ria: {stats_antes.get('total_products_sample', 'N/A')}")
        
        # Importar
        print("\nüöÄ Iniciando importa√ß√£o...")
        resultado = spreadsheet_importer.import_to_memory(
            arquivo, 
            force_update=True, 
            batch_size=10
        )
        
        print(f"\n‚úÖ Importa√ß√£o conclu√≠da:")
        print(f"   - Produtos importados: {resultado['imported']}")
        print(f"   - Produtos atualizados: {resultado['updated']}")
        print(f"   - Produtos ignorados: {resultado['skipped']}")
        print(f"   - Erros: {resultado['errors']}")
        print(f"   - Total processado: {resultado['total_processed']}")
        
        if resultado['error_details']:
            print(f"\n‚ö†Ô∏è  Detalhes dos erros:")
            for erro in resultado['error_details'][:3]:
                print(f"     - {erro}")
        
        # Estat√≠sticas depois
        print("\nüìä Estat√≠sticas DEPOIS da importa√ß√£o:")
        stats_depois = get_memory_statistics()
        print(f"   - Produtos na mem√≥ria: {stats_depois.get('total_products_sample', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        print("   Nota: Isso √© esperado se o Redis n√£o estiver rodando.")
        print("   O sistema ainda funciona com backup local.")
        return False

def demonstrar_uso_memoria():
    """Demonstra como usar a mem√≥ria ap√≥s importa√ß√£o."""
    print("\nüß† DEMONSTRA√á√ÉO: Uso da Mem√≥ria Inteligente")
    print("=" * 50)
    
    from api.memory_utils import get_cached_content_or_generate
    from api.product_memory import ProductMemory
    
    try:
        memory = ProductMemory()
        
        # Listar alguns produtos na mem√≥ria
        print("üìã Produtos na mem√≥ria:")
        produtos = memory.list_products(limit=3)
        
        if produtos:
            for produto in produtos:
                print(f"   - {produto.get('identifier', 'N/A')}: {produto.get('title', 'Sem t√≠tulo')[:50]}...")
            
            # Demonstrar recupera√ß√£o de conte√∫do
            primeiro_produto = produtos[0]
            identifier = primeiro_produto.get('identifier')
            
            if identifier:
                print(f"\nüîÑ Testando recupera√ß√£o de conte√∫do para: {identifier}")
                
                # Simular dados de produto
                product_data = {
                    'sku': identifier,
                    'title': primeiro_produto.get('title', 'Produto Teste'),
                    'description': 'Descri√ß√£o de teste'
                }
                
                # Tentar recuperar conte√∫do (isso usar√° a mem√≥ria se dispon√≠vel)
                print("   - Verificando se conte√∫do j√° existe na mem√≥ria...")
                conteudo_existente = memory.get_product_data(identifier)
                
                if conteudo_existente:
                    print("   ‚úÖ Conte√∫do encontrado na mem√≥ria! (economia de tokens)")
                    print(f"   - T√≠tulo: {conteudo_existente.get('title', 'N/A')[:50]}...")
                else:
                    print("   ‚ÑπÔ∏è  Conte√∫do n√£o encontrado na mem√≥ria (seria gerado pela IA)")
        else:
            print("   ‚ÑπÔ∏è  Nenhum produto encontrado na mem√≥ria")
            print("   Dica: Execute a importa√ß√£o primeiro")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao acessar mem√≥ria: {e}")
        return False

def main():
    """Executa demonstra√ß√£o completa."""
    print("üéØ DEMONSTRA√á√ÉO COMPLETA: Sistema de Importa√ß√£o de Planilhas")
    print("=" * 70)
    print("\nEste exemplo mostra como usar o sistema para acelerar sua cataloga√ß√£o!")
    
    # Passo 1: Criar planilha de exemplo
    arquivo = criar_planilha_exemplo()
    
    try:
        # Passo 2: Preview
        if demonstrar_preview(arquivo):
            print("\n‚úÖ Preview realizado com sucesso!")
        
        # Passo 3: An√°lise de colunas
        if demonstrar_analise_colunas(arquivo):
            print("\n‚úÖ An√°lise de colunas realizada com sucesso!")
        
        # Passo 4: Importa√ß√£o
        if demonstrar_importacao(arquivo):
            print("\n‚úÖ Importa√ß√£o realizada com sucesso!")
        
        # Passo 5: Uso da mem√≥ria
        if demonstrar_uso_memoria():
            print("\n‚úÖ Demonstra√ß√£o da mem√≥ria realizada com sucesso!")
        
        # Instru√ß√µes finais
        print("\n" + "=" * 70)
        print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
        print("\nüìö PR√ìXIMOS PASSOS:")
        print("\n1. üìã Use suas pr√≥prias planilhas:")
        print("   python manage.py import_spreadsheet sua_planilha.xlsx --preview")
        print("\n2. üåê Use a API REST:")
        print("   POST /api/spreadsheet/preview/ (com arquivo)")
        print("   POST /api/spreadsheet/import/ (com arquivo)")
        print("\n3. üì• Baixe o template:")
        print("   GET /api/import/template/")
        print("\n4. üìñ Consulte a documenta√ß√£o:")
        print("   GUIA_IMPORTACAO_PLANILHAS.md")
        print("\nüí° BENEF√çCIOS:")
        print("   ‚úÖ Economia massiva de tokens de IA")
        print("   ‚úÖ Gera√ß√£o mais r√°pida de conte√∫do")
        print("   ‚úÖ Reutiliza√ß√£o inteligente de dados")
        print("   ‚úÖ Suporte a milhares de produtos")
        
    finally:
        # Limpar arquivo de exemplo
        if os.path.exists(arquivo):
            os.remove(arquivo)
            print(f"\nüßπ Arquivo de exemplo removido: {arquivo}")

if __name__ == '__main__':
    main()